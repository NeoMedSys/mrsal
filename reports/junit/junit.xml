<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="39" time="50.212" timestamp="2025-07-04T18:26:27.943531+02:00" hostname="andromeda"><testcase classname="tests.test_mrsal_async_no_tls" name="test_valid_message_processing" time="0.019" /><testcase classname="tests.test_mrsal_async_no_tls" name="test_invalid_payload_validation" time="0.015" /><testcase classname="tests.test_mrsal_async_no_tls" name="test_requeue_on_invalid_message" time="4.014" /><testcase classname="tests.test_mrsal_blocking_no_tls" name="test_retry_on_connection_failure_blocking" time="4.009" /><testcase classname="tests.test_mrsal_blocking_no_tls" name="test_valid_message_processing" time="0.015" /><testcase classname="tests.test_mrsal_blocking_no_tls" name="test_valid_message_processing_no_autoack" time="0.013" /><testcase classname="tests.test_mrsal_blocking_no_tls" name="test_invalid_message_skipped" time="0.013" /><testcase classname="tests.test_mrsal_blocking_no_tls" name="test_requeue_on_validation_failure" time="4.010" /><testcase classname="tests.test_mrsal_blocking_no_tls" name="test_publish_message" time="0.005"><failure message="AssertionError: expected call not found.&#10;Expected: mock(exchange_name='test_x', queue_name='test_q', exchange_type='direct', routing_key='test_route')&#10;Actual: mock(exchange_name='test_x', queue_name='test_q', exchange_type='direct', routing_key='test_route', passive=True)">amqp_consumer = MrsalBlockingAMQP(host='localhost', port=5672, credentials=('user', 'password'), virtual_host='testboi', ssl=False, ve... prefetch_count=1, heartbeat=60, dlx_enable=True, max_retries=3, use_quorum_queues=True, blocked_connection_timeout=60)

    def test_publish_message(amqp_consumer):
        """Test that the message is correctly published to the exchange."""
        amqp_consumer._setup_exchange_and_queue = Mock()
    
        message = b'{"data": "test_message"}'
        exchange_name = 'test_x'
        routing_key = 'test_route'
    
        amqp_consumer.publish_message(
            exchange_name=exchange_name,
            routing_key=routing_key,
            message=message,
            exchange_type='direct',
            queue_name='test_q',
            auto_declare=True
        )
    
&gt;       amqp_consumer._setup_exchange_and_queue.assert_called_once_with(
            exchange_name=exchange_name,
            queue_name='test_q',
            exchange_type='direct',
            routing_key=routing_key
        )

tests/test_mrsal_blocking_no_tls.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/local/lib/python3.12/unittest/mock.py:956: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Mock id='140203246558032'&gt;, args = ()
kwargs = {'exchange_name': 'test_x', 'exchange_type': 'direct', 'queue_name': 'test_q', 'routing_key': 'test_route'}
expected = call(exchange_name='test_x', queue_name='test_q', exchange_type='direct', routing_key='test_route')
actual = call(exchange_name='test_x', queue_name='test_q', exchange_type='direct', routing_key='test_route', passive=True)
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7f839ccdce00&gt;, cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: mock(exchange_name='test_x', queue_name='test_q', exchange_type='direct', routing_key='test_route')
E           Actual: mock(exchange_name='test_x', queue_name='test_q', exchange_type='direct', routing_key='test_route', passive=True)

/usr/local/lib/python3.12/unittest/mock.py:944: AssertionError</failure></testcase><testcase classname="tests.test_mrsal_blocking_no_tls" name="test_publish_messages" time="0.005" /><testcase classname="tests.test_mrsal_blocking_no_tls" name="test_retry_on_unroutable_error" time="4.009" /><testcase classname="tests.test_mrsal_blocking_tls.TestBlockRabbitSSLSetup" name="test_ssl_setup_with_missing_paths" time="0.003" /><testcase classname="tests.test_mrsal_blocking_tls.TestBlockRabbitSSLSetup" name="test_ssl_setup_with_valid_paths" time="0.003" /><testcase classname="tests.test_mrsal_blocking_tls.TestBlockRabbitSSLSetup" name="test_ssl_setup_without_env_vars" time="0.003" /><testcase classname="tests.test_mrsal_custom_dlx.TestDLXExchangeNameConfiguration" name="test_dlx_fallback_naming_sync" time="4.007" /><testcase classname="tests.test_mrsal_custom_dlx.TestDLXExchangeNameConfiguration" name="test_dlx_custom_naming_sync" time="4.008" /><testcase classname="tests.test_mrsal_custom_dlx.TestDLXExchangeNameConfiguration" name="test_dlx_fallback_naming_async" time="4.020" /><testcase classname="tests.test_mrsal_custom_dlx.TestDLXExchangeNameConfiguration" name="test_dlx_custom_naming_async" time="4.024" /><testcase classname="tests.test_mrsal_custom_dlx.TestDLXExchangeNameConfiguration" name="test_dlx_exchange_setup_fallback_sync" time="0.005" /><testcase classname="tests.test_mrsal_custom_dlx.TestDLXExchangeNameConfiguration" name="test_dlx_exchange_setup_custom_sync" time="0.005" /><testcase classname="tests.test_mrsal_custom_dlx.TestDLXExchangeNameConfiguration" name="test_dlx_exchange_setup_fallback_async" time="0.008" /><testcase classname="tests.test_mrsal_custom_dlx.TestDLXExchangeNameConfiguration" name="test_dlx_exchange_setup_custom_async" time="0.008" /><testcase classname="tests.test_mrsal_dlx_retry.TestRetryMechanism" name="test_immediate_retry_params_exist" time="0.004" /><testcase classname="tests.test_mrsal_dlx_retry.TestRetryMechanism" name="test_retry_cycle_params_exist" time="0.004" /><testcase classname="tests.test_mrsal_dlx_retry.TestRetryMechanism" name="test_immediate_retry_delay" time="0.008" /><testcase classname="tests.test_mrsal_dlx_retry.TestRetryMechanism" name="test_validation_failure_with_retry_cycles_disabled" time="4.006" /><testcase classname="tests.test_mrsal_dlx_retry.TestRetryMechanism" name="test_validation_failure_with_retry_cycles_enabled" time="4.008" /><testcase classname="tests.test_mrsal_dlx_retry.TestRetryMechanism" name="test_callback_failure_triggers_retry" time="1.012" /><testcase classname="tests.test_mrsal_dlx_retry.TestRetryMechanism" name="test_successful_processing_acks_message" time="0.007" /><testcase classname="tests.test_mrsal_dlx_retry.TestAsyncRetryCycles" name="test_async_start_consumer_has_retry_cycle_params" time="0.008" /><testcase classname="tests.test_mrsal_dlx_retry.TestAsyncRetryCycles" name="test_async_immediate_retry_delay" time="0.021" /><testcase classname="tests.test_mrsal_dlx_retry.TestAsyncRetryCycles" name="test_async_validation_failure_with_cycles_disabled" time="4.017" /><testcase classname="tests.test_mrsal_dlx_retry.TestAsyncRetryCycles" name="test_async_successful_processing" time="0.007" /><testcase classname="tests.test_mrsal_dlx_retry.TestAsyncRetryCycles" name="test_async_callback_failure_retry_cycles" time="4.017" /><testcase classname="tests.test_mrsal_dlx_retry.TestDLXRetryHeaders" name="test_retry_cycle_info_extraction" time="0.003" /><testcase classname="tests.test_mrsal_dlx_retry.TestDLXRetryHeaders" name="test_retry_cycle_info_defaults" time="0.002" /><testcase classname="tests.test_mrsal_dlx_retry.TestDLXRetryHeaders" name="test_should_continue_retry_cycles_time_limit" time="0.004" /><testcase classname="tests.test_mrsal_dlx_retry.TestDLXRetryHeaders" name="test_should_continue_retry_cycles_disabled" time="0.002" /><testcase classname="tests.test_mrsal_dlx_retry.TestDLXRetryHeaders" name="test_create_retry_cycle_headers" time="0.002" /></testsuite></testsuites>