name: Mrsal Workflow
on:
  push:
    branches:
      - main
      - 'release/**'
      - '!releases/**-alpha'
  release:
    types: [published]
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Set up poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.8.0'
      - name: Install dependencies
        run: |
          poetry install --no-cache --no-root
          export msg="s/release-[0-9]+\.[0-9]+\.[0-9]+(-[ab][0-9]+)?/release-$(poetry version -s)/g"
          sed -i -E "$msg" ./README.md
      - name: Check version bump
        run: |
          # Get current version from main branch
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:pyproject.toml | grep "^version" | sed 's/version = "\(.*\)"/\1/')
          CURRENT_VERSION=$(poetry version -s)
          
          echo "Main branch version: $MAIN_VERSION"
          echo "PR version: $CURRENT_VERSION"
          
          if [ "$MAIN_VERSION" = "$CURRENT_VERSION" ]; then
            echo "❌ Version not bumped! Please run 'poetry version patch|minor|major'"
            exit 1
          else
            echo "✅ Version bumped: $MAIN_VERSION → $CURRENT_VERSION"
          fi
      - name: Run tests
        run: |
          poetry run nox -s setup tests
      - name: Commit to GH
        uses: stefanzweifel/git-auto-commit-action@v4

  publish_to_pypi:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Set up poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.8.0'
      - name: Install dependencies
        run: |
          poetry install --no-cache --no-root
      - name: Check if version exists on PyPI
        run: |
          CURRENT_VERSION=$(poetry version -s)
          if pip index versions mrsal | grep -q "$CURRENT_VERSION"; then
            echo "❌ Version $CURRENT_VERSION already exists on PyPI"
            echo "This probably means the version wasn't bumped in the PR"
            exit 1
          else
            echo "✅ Version $CURRENT_VERSION is new, proceeding with publish"
          fi
      - name: Build and publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry build
          poetry publish

  build_release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Set up poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.8.0'
      - name: Install dependencies
        run: |
          poetry install --no-cache --no-root
      - name: Build and publish release
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry build
          poetry publish

  doc_building:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate access token
        uses: qoomon/actions--access-token@v3
        id: access-token
        with:
          permissions: |
            contents: write
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Setup poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.8.2'
      - name: Install Dependencies
        run: |
          poetry lock --no-update
          poetry install --with dev --no-cache --no-root
      - name: Run tests and generate reports
        run: |
          # Run all nox sessions together to maintain proper flow
          poetry run nox -s setup tests generate_badges
      - name: Commit coverage badges
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'Update coverage badges [skip ci]'
          file_pattern: 'reports/badges/*.svg'
          token: ${{ steps.access-token.outputs.token }}
      - name: Copy test reports for GitHub Pages
        run: |
          mkdir -p ./docs/_build/html/reports
          cp -r ./reports/ ./docs/_build/html/reports/ || true
      - name: Generate Sphinx Project
        run: |
          mkdir -p docs
          poetry run sphinx-quickstart -q -p "MrsalAMQP" -a "MrsalAMQP Contributors" -v "1.0.0" docs
          echo "extensions.extend(['sphinx.ext.autodoc', 'sphinx.ext.napoleon', 'myst_parser'])" >> docs/conf.py
      - name: Generate API Documentation
        run: |
          poetry run sphinx-apidoc -o ./docs ./mrsal
      - name: Build HTML Documentation
        run: |
          poetry run sphinx-build -b html ./docs ./docs/_build/html
      - name: Publish Docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          publish_branch: gh-pages
